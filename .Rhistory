DF
DF <- aggregate(x = DF$trend, by = list(Season = DF$Season),mean)
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1])-1)))
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
DF <- data.frame(trend = predict(s),
week = x[, 1])
DF$Year <- as.numeric(format(DF$week, format = "%Y"))
DF$Month <- as.numeric(format(DF$week, format = "%m"))
DF$Season <- ifelse(DF$Month > 5, DF$Year,DF$Year-1)
DF <- aggregate(x = DF$trend, by = list(Season = DF$Season),mean)
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1])-1)))
DF
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1])-1)*100))
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1]-1)*100)))
DF
geoData <- read.csv("geoMap.csv", skip = 2)
geoData
head(geoData)
names(geoData)[2] <- "index"
str(geoData)
table(geoData$index)
geoData$index <- ifelse(geoData$index == "<1","0",geoData$index)
table(geoData$index)
head(geoData)
geoData <- read.csv("geoMap.csv", skip = 2)
names(geoData)[2] <- "index"
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
head(geoData)
geoData$index <- as.numeric(geoData$index)
head(geoData)
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
print(geoData[order(geoData$index), ])
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
print(geoData[order(geoData$index, decreasing = FALSE), ])
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
print(geoData[order(geoData$index, decreasing = TRUE), ])
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
head(geoData[order(geoData$index, decreasing = TRUE), ], n = 15)
1/4*4/3
4/3
0.11*6
0.07*8
0.04*30
0.1*6
s <- loess(cCross$Worldwide[, 2] ~ seq(1:length(cCross$Worldwide[, 1])))
smoothIndex <- predict(s)
n <- names(cCross$Worldwide)
ggplot(data = cCross$Worldwide) +
geom_line(aes_string(x = n[1], y = n[2])) +
geom_line(aes(x = cCross$Worldwide[, 1], y = smoothIndex), colour = "blue")
smoothTrend <- lapply(cCross, function(x) {
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
smoothIndex <- predict(s)
n <- names(x)
p <- ggplot(data = x) +
geom_line(aes_string(x = n[1], y = n[2])) +
geom_line(aes(x = x[, 1], y = smoothIndex), colour = "blue")
return(p)
})
print(smoothTrend$Worldwide)
smoothTrend <- lapply(cCross, function(x) {
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
smoothIndex <- predict(s)
n <- names(x)
p <- ggplot(data = x) +
geom_line(aes_string(x = n[1], y = n[2])) +
geom_line(aes(x = x[, 1], y = smoothIndex), colour = "blue") +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Popularity of cyclo-cross related search - ", n[2]))
return(p)
})
print(smoothTrend$Worldwide)
seasonTrend <- lapply(cCross, function(x){
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
DF <- data.frame(trend = predict(s),
week = x[, 1])
DF$Year <- as.numeric(format(DF$week, format = "%Y"))
DF$Month <- as.numeric(format(DF$week, format = "%m"))
DF$Season <- ifelse(DF$Month > 5, DF$Year,DF$Year-1)
DF <- aggregate(x = DF$trend, by = list(Season = DF$Season),mean)
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1]-1)*100)))
names(DF)[2] <- names(x)[2]
n <- names(DF)
trend <- ggplot(data = DF, aes_string(x = n[1], y = n[2])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Trend of popularity of cyclo-cross related search - ", n[2]))
change <- ggplot(data = DF, aes_string(x = n[1], y = n[3])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Trend of popularity of cyclo-cross related search - ", n[2]))
return(seasonList(Trend = trend,
Change = change,
Table = DF))
})
seasonTrend <- lapply(cCross, function(x){
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
DF <- data.frame(trend = predict(s),
week = x[, 1])
DF$Year <- as.numeric(format(DF$week, format = "%Y"))
DF$Month <- as.numeric(format(DF$week, format = "%m"))
DF$Season <- ifelse(DF$Month > 5, DF$Year,DF$Year-1)
DF <- aggregate(x = DF$trend, by = list(Season = DF$Season),mean)
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1]-1)*100)))
names(DF)[2] <- names(x)[2]
n <- names(DF)
trend <- ggplot(data = DF, aes_string(x = n[1], y = n[2])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Trend of popularity of cyclo-cross related search - ", n[2]))
change <- ggplot(data = DF, aes_string(x = n[1], y = n[3])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Trend of popularity of cyclo-cross related search - ", n[2]))
return(list(Trend = trend,
Change = change,
Table = DF))
})
print(seasonTrend$Worldwide$Trend)
print(seasonTrend$Worldwide$Trend)
print(seasonTrend$Belgium$Trend)
print(seasonTrend$Netherlands$Trend)
?gridExtra
library(gridExtra)
?grid.arrange
grid.arrange(seasonTrend$UnitedStates, seasonTrend$UnitedKingdom, seasonTrend$France, seasonTrend$Germany, nrow = 2, ncol = 2)
grid.arrange(seasonTrend$UnitedStates$Trend, seasonTrend$UnitedKingdom$Trend, seasonTrend$France$Trend, seasonTrend$Germany$Trend, nrow = 2, ncol = 2)
rm(list=ls())
library(rvest)
countryNode <- html_nodes(urlPage, ".jquery-tablesorter")
urlPage <- "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
countryNode <- html_nodes(urlPage, ".jquery-tablesorter")
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryNode <- html_nodes(urlPage, ".jquery-tablesorter")
countryNode
html_table(countryNode)
urlPage <- html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
urlPage %>%
html_nodes(, ".jquery-tablesorter") %>%
html_table()
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
urlPage %>%
html_nodes(, ".jquery-tablesorter") %>%
html_table()
urlPage %>%
html_nodes(".jquery-tablesorter") %>%
html_table()
vignette("selectorgadget")
urlPage %>%
html_nodes("#titleCast .jquery-tablesorter") %>%
html_table()
urlPage %>%
html_nodes("#titleCast .jquery-tablesorter")
urlPage %>%
html_nodes(".mw-parser-output")
urlPage %>%
html_nodes("td")
urlPage %>%
html_nodes("td") %>%
html_table()
urlPage %>%
html_nodes("td") %>%
html_text()
urlPage %>%
html_nodes("td") %>%
html_text()
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText, ncol = 6, nrow = 200)
1454/6
countryM <- matrix(countryText, ncol = 6, nrow = 242)
1454/7
head(countryText)
1452/6
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242)
head(countryM)
?matrix
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
head(countryM)
apply(countryM, 1, gsub, pattern = "\n", replacement = "")
countryM <- apply(countryM, 1, gsub, pattern = "\n", replacement = "")
head(countryM)
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
head(countryM)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
head(countryM)
countryM <- apply(countryM, 2, gsub, pattern = "[*", replacement = "")
countryM[, 2] <- apply(countryM[, 2], 2, gsub, pattern = "[*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[N*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "\\[*", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[.*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "([*)", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[]*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "\.[*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "?[*", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "Note[0-9]", replacement = "")
head(countryM)
countryM[, 2] <- gsub(countryM[, 2], pattern = "Note [0-9]", replacement = "")
head(countryM)
countryM[, 2] <- gsub(countryM[, 2], pattern = "[Note [0-9]]", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[Note [0-9]]", replacement = "")
head(countryM)
countryM[, 2] <- gsub(countryM[, 2], pattern = "[Note [0-9]]", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "Note [0-9]", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "[Note [0-9]]", replacement = "")
head(countryM)
tail(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "\\Note [0-9]", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n", replacement = "")
countryM[, 2] <- gsub(countryM[, 2], pattern = "\\[Note [0-9]]", replacement = "")
head(countryM)
head(as.numeric(countryM[, 3]))
countryM <- apply(countryM, 2, gsub, pattern = ",", replacement = "")
head(as.numeric(countryM[, 3]))
head(countryM)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(ggplot2)
library(gridExtra)
library(rvest)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n | ,", replacement = "")
head(countryM)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
head(countryM)
countryDF <- as.data.frame(countryM)
str(countryDF)
head(countryDF)
countryDF <- as.data.frame(countryM[, c(2, 3)])
names(countryDF) <- c("Country", "Population")
head(countryDF)
countryDF$Population <- as.numeric(countryDF$Population)
head(countryDF)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
countryM[, 2] <- as.numeric(countryM[, 2])
countryDF <- as.data.frame(countryM[, c(2, 3)])
names(countryDF) <- c("Country", "Population")
head(countryDF)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
countryM[, 2] <- as.numeric(countryM[, 2])
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
countryM[, 3] <- as.numeric(countryM[, 3])
countryDF <- as.data.frame(countryM[, c(2, 3)])
names(countryDF) <- c("Country", "Population")
head(countryDF)
str(countryDF)
str(countryM)
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
countryM[, 3] <- as.numeric(countryM[, 3])
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
head(countryDF)
str(countryDF)
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
geoData
head(countryDF)
head(countryDF$Country)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
head(countryM)
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
geoData
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
geoData
colSums(geoData$index)
colSums(geoData)
colSums(geoData[, c(2:3)])
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
#calculate index proportion
geoData$wIndex <- geoData$index/100*geoData$Population
geoData$Prop_of_searches <- geoData$wIndex/sum(geoData$wIndex, na.rm = TRUE)*100
#print
head(geoData[order(geoData$index, decreasing = TRUE), c("Country", "Index", "Prop_of_searches")], n = 25)
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
#calculate index proportion
geoData$wIndex <- geoData$index/100*geoData$Population
geoData$Prop_of_searches <- geoData$wIndex/sum(geoData$wIndex, na.rm = TRUE)*100
#print
head(geoData[order(geoData$index, decreasing = TRUE), c("Country", "index", "Prop_of_searches")], n = 25)
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Country[countryDF$Country == "Czech Republic"] <- "Czechia"
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
#calculate index proportion
geoData$wIndex <- geoData$index/100*geoData$Population
geoData$Prop_of_searches <- geoData$wIndex/sum(geoData$wIndex, na.rm = TRUE)*100
#print
head(geoData[order(geoData$index, decreasing = TRUE), c("Country", "index", "Prop_of_searches")], n = 25)
listFiles <- list.files()[grepl("multiTimeline", list.files())]
cCross <- lapply(listFiles, function(x)
read.csv(x, skip = 2, stringsAsFactors = FALSE))
cCross <- lapply(cCross, function(x){
names(x)[2] <- gsub(pattern = "Cyclo.cross...",replacement = "",x = names(x)[2])
names(x)[2] <- gsub(pattern = "[.]",replacement = "",x = names(x)[2])
x})
names(cCross) <- sapply(cCross, function(x)
names(x)[2]
)
cCross <- lapply(cCross, function(x){
x[, 1] <- as.Date(x[, 1], format = "%Y-%m-%d")
x
})
head(unlist(cCross))
listFiles <- list.files()[grepl("multiTimeline", list.files())]
cCross <- lapply(listFiles, function(x)
read.csv(x, skip = 2, stringsAsFactors = FALSE))
cCross <- lapply(cCross, function(x){
names(x)[2] <- gsub(pattern = "Cyclo.cross...",replacement = "",x = names(x)[2])
names(x)[2] <- gsub(pattern = "[.]",replacement = "",x = names(x)[2])
x})
names(cCross) <- sapply(cCross, function(x)
names(x)[2]
)
cCross <- lapply(cCross, function(x){
x[, 1] <- as.Date(x[, 1], format = "%Y-%m-%d")
x
})
geoData <- read.csv("geoMap.csv", skip = 2, stringsAsFactors = FALSE)
names(geoData)[2] <- "index"
geoData$index[geoData$index == "<1"] <- "0"
geoData$index <- as.numeric(geoData$index)
#read population data
urlPage <- read_html("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
countryText <- urlPage %>%
html_nodes("td") %>%
html_text()
countryM <- matrix(countryText[-c(1,2)], ncol = 6, nrow = 242, byrow = TRUE)
countryM <- apply(countryM, 2, gsub, pattern = "^ |\n|,|\\[Note [0-9]]", replacement = "")
countryDF <- as.data.frame(countryM[, c(2, 3)], stringsAsFactors = FALSE)
names(countryDF) <- c("Country", "Population")
countryDF$Country[countryDF$Country == "Czech Republic"] <- "Czechia"
countryDF$Population <- as.numeric(countryDF$Population)
#merge
geoData <- merge(geoData, countryDF, by = "Country", all.x = TRUE)
#calculate index proportion
geoData$wIndex <- geoData$index/100*geoData$Population
geoData$Prop_of_all_searches <- geoData$wIndex/sum(geoData$wIndex, na.rm = TRUE)*100
#print
head(geoData[order(geoData$index, decreasing = TRUE), c("Country", "index", "Prop_of_all_searches")], n = 25)
smoothTrend <- lapply(cCross, function(x) {
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
smoothIndex <- predict(s)
n <- names(x)
p <- ggplot(data = x) +
geom_line(aes_string(x = n[1], y = n[2])) +
geom_line(aes(x = x[, 1], y = smoothIndex), colour = "blue") +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Popularity of cyclo-cross related searches - ", n[2]))
return(p)
})
seasonTrend <- lapply(cCross, function(x){
s <- loess(x[, 2] ~ seq(1:length(x[, 1])))
DF <- data.frame(trend = predict(s),
week = x[, 1])
DF$Year <- as.numeric(format(DF$week, format = "%Y"))
DF$Month <- as.numeric(format(DF$week, format = "%m"))
DF$Season <- ifelse(DF$Month > 5, DF$Year,DF$Year-1)
DF <- aggregate(x = DF$trend, by = list(Season = DF$Season),mean)
DF$Change <- c(NA,
unlist(sapply(1:nrow(DF), function(i) (DF$x[i]/DF$x[i-1]-1)*100)))
names(DF)[2] <- names(x)[2]
n <- names(DF)
trend <- ggplot(data = DF, aes_string(x = n[1], y = n[2])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Trend of popularity of CX related searches - ", n[2]))
change <- ggplot(data = DF, aes_string(x = n[1], y = n[3])) +
geom_col() +
ylab("Google Search Index (100 = max point)") +
ggtitle(paste0("Average popularity of CX related searches by season - ", n[2]))
return(list(Trend = trend,
Change = change,
Table = DF))
})
grid.arrange(seasonTrend$UnitedStates$Trend, seasonTrend$Japan$Trend,seasonTrend$UnitedKingdom$Trend, seasonTrend$France$Trend, seasonTrend$Germany$Trend, nrow = 2, ncol = 3)
urlPage <- read_html("https://en.wikipedia.org/wiki/Mathieu_van_der_Poel")
pageText <- urlPage %>%
html_nodes("dd") %>%
html_table()
pageText <- urlPage %>%
html_nodes("dd") %>%
html_text()
pageText <- urlPage %>%
html_nodes("dd") %>%
html_text()
pageText
